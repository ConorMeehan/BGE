// Author: Conor Meehan
#version 430 compatibility
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

uniform uint numberParticles;
uniform float dt;
uniform float attractorScale;
uniform vec3 g;
uniform vec4 startColor;
uniform vec4 endColor;

// Not using a vec4 so there is a problem with std430 getting the correct values when using vec3
// Currently the workaround I'm using is to store the values in a struct and create a vec3
struct customVec3 
{
	float x;
	float y;
	float z;
};
struct customVec2
{
	float x;
	float y;
};
layout(std430, binding=0) buffer Pos {
    customVec3 Positions[ ];
};
layout(std430, binding=1) buffer Vel {
    customVec3 Velocities[ ];
};
layout(std430, binding=2) buffer LifeVal {
	customVec3 Life[ ];
};
layout(std430, binding=3) buffer Col {
    vec4 Color[ ];
};
layout(std430, binding=4) buffer Attr {
    customVec3 Attractor;
};

layout( local_size_x = 256, local_size_y = 1, local_size_z = 1 ) in;

// The following rand function was taken from the following website
// http://www.ozone3d.net/blogs/lab/20110427/glsl-random-generator/
float rand(vec2 n)
{
  return 0.5 + 0.5 * 
     fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);
}

void main(){
	// Get the global id
	uint gid = gl_GlobalInvocationID.x;
	if(gid <= numberParticles)
	{
		// Initialise the values for this instance
		vec3 p = vec3(Positions[gid].x, Positions[gid].y, Positions[gid].z);
		vec3 v = vec3(Velocities[gid].x, Velocities[gid].y, Velocities[gid].z);
		vec3 att = vec3(Attractor.x, Attractor.y, Attractor.z);

		vec3 direction = vec3(0,0,0);
		direction = attractorScale*normalize(att-p);

		p += v*dt;
		v = 0.9998*(v+g*dt+direction*dt);

		// If life.y < 0 then this is a stay alive particle
		if(Life[gid].y < 0.0)
		{
			Life[gid].x += dt * Life[gid].z;
			// if the life is positve make the life multiplier negative
			if(Life[gid].x >= 0.0 && Life[gid].z > 0)
			{
				Life[gid].z = -1.0;
			}
			// If the life is past the original value swap the life multiplier
			else if(Life[gid].x <= Life[gid].y)
			{
				Life[gid].z = 1.0;
			}
		}
		if(Life[gid].y > 0.0  && Life[gid].x > 0.0)
		{
			Life[gid].x -= dt;
		}
		
		// If the particle has no target life set, then it should be invisible
		// A better solution would be to not draw it at all however this would require rebuilding the array
		if(Life[gid].y == 0)
		{
			Color[gid] = vec4(0);
		}
		else
		{
			Color[gid] = mix(startColor, endColor, 1.0-Life[gid].x/Life[gid].y);
			Color[gid].x += (rand(vec2(gid,1.0)) - 0.5) / 2.0;
			Color[gid].y += (rand(vec2(gid,1.0)) - 0.5) / 2.0;
			Color[gid].z += (rand(vec2(gid,1.0)) - 0.5) / 2.0;
		}

		// Particles rest on the ground
		if(p.y < 0)
		{
			p.y = 0;
		}

		Positions[gid].x = p.x;
		Positions[gid].y = p.y;
		Positions[gid].z = p.z;
		Velocities[gid].x = v.x;
		Velocities[gid].y = v.y;
		Velocities[gid].z = v.z;
	}
}
