// Author: Conor Meehan
#version 430 compatibility
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

uniform uint numberParticles;
uniform float seed;
uniform vec3 emitter;
uniform vec3 emitterSize;
// If life is negative the particle will stay alive using the life time to loop the colors
uniform float maxLife;

// Not using a vec4 so there is a problem with std430 getting the correct values when using vec3
// Currently the workaround I'm using is to store the values in a struct and create a vec3
struct customVec3 
{
	float x;
	float y;
	float z;
};
struct customVec2
{
	float x;
	float y;
};
layout(std430, binding=0) buffer Pos {
    customVec3 Positions[ ];
};
layout(std430, binding=1) buffer Vel {
    customVec3 Velocities[ ];
};
layout(std430, binding=2) buffer LifeVal {
	customVec3 Life[ ];
};

layout( local_size_x = 256, local_size_y = 1, local_size_z = 1 ) in;

vec2 randSeed;
vec2 getNextRandSeed()
{
	randSeed.y += 0.1*seed;
	return randSeed;
}
// The following rand function was taken from the following website
// http://www.ozone3d.net/blogs/lab/20110427/glsl-random-generator/
float rand()
{
	vec2 n = getNextRandSeed();
	return 0.5 + 0.5 * 
     fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);
}

float randBetween(float min, float max)
{
	return (rand() * (max - min)) + min;
}

void main(){
	// Get the global id
	uint gid = gl_GlobalInvocationID.x;
	if(gid <= numberParticles)
	{
		randSeed = vec2(gid,0);
		if((Life[gid].x <= 0 && Life[gid].y >= 0.0))
		{
			vec3 p = emitter + vec3(randBetween(-emitterSize.x,emitterSize.x), 
						randBetween(-emitterSize.y,emitterSize.y), randBetween(-emitterSize.z,emitterSize.z));
			vec3 v;
			v.x = randBetween(-0.2,0.2);
			v.y = randBetween(-0.2,0.2);
			v.z = randBetween(-0.2,0.2);

			if(maxLife < 0.0)
			{
				Life[gid].x = randBetween(maxLife, 0);
				Life[gid].x = maxLife;
				Life[gid].z = 1.0;
			}
			else
			{
				Life[gid].x = randBetween(0, maxLife);
			}
			Life[gid].y = Life[gid].x;
	
			Positions[gid].x = p.x;
			Positions[gid].y = p.y;
			Positions[gid].z = p.z;
			Velocities[gid].x = v.x;
			Velocities[gid].y = v.y;
			Velocities[gid].z = v.z;
		}
	}
}
